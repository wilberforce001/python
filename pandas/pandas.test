
import pandas

mydataset = {
    'cars': ["BMW", "Volvo", "Ford"], 
    'passings': [3, 7, 2]
}

myvar = pandas.DataFrame(mydataset)

print(myvar)


#Pandas as pd
import pandas as pd

mydataset = {
    'cars': ["BMW", "Volvo", "Ford"],
    'passings': [3, 7, 2]
}

myvar = pd.DataFrame(mydataset)

print(myvar)

#Checking Pandas Version

import pandas as pd

print(pd.__version__)

#What is a Series?
#A Pandas Series is like a column in a table.
#It is a one-dimensional array holding data of any type.
import pandas as pd

a = [1, 7, 2]

myvar = pd.Series(a)

print(myvar)

#Labels
#Can be used to access a specified value

#EXAMPLE to return a value of the series 
print(myvar[0])

#Create LABELS
import pandas as pd

a = [1, 7, 2]

myvar = pd.Series(a, index = ["x", "y", "z"])

print(myvar)

#When you have created labels, you can access an item by referring to the label.
#Return the value of "y":
print(myvar["y"])

#Key/Value Objects as Series
#Create a simple Pandas Series from a dictionary

import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}

myvar = pd.Series(calories)

print(myvar)

#use the index argument and specify only the items you want to include in the Series.
import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}

myvar = pd.Series(calories, index = ["day1", "day2"])

print(myvar)

#DataFrames
#Data sets in Pandas are usually multi-dimensional tables, called DataFrames.
#Series is like a column, a DataFrame is the whole table.

#Create a DataFrame from two Series:
import pandas as pd

data = {
    "calories": [420, 380, 390],
    "duration": [50, 40, 45]
}

myvar = pd.DataFrame(data)

print(myvar)

#Pandas use the loc attribute to return one or more specified row(s)
#refer to the row index
print(myvar.loc[0])

#Return row 0 and 1
#Use a list of indexes
print(myvar.loc[[0,1]])

#Named Indexes
#With the index argument, you can name your own indexes.
#Add a list of names to give each row a name
import pandas as pd

data = {
    "calories": [420, 380, 390],
    "duration": [50, 40, 45]
}

df = pd.DataFrame(data, index = ["day1", "day2", "day3"])

print(df)

#Load Files Into a DataFrame
#If your data sets are stored in a file, Pandas can load them into a DataFrame.
#Example, If your data sets are stored in a file, Pandas can load them into a DataFrame.
#Load a comma separated file (CSV file) into a DataFrame

#Pandas Read CSV
#Load the CSV into a DataFrame


import pandas as pd

df = pd.read_csv('data.csv')

print(df.to_string()) # use to_string() to print the entire DataFrame.


#If you have a large DataFrame with many rows, Pandas will only return the first 5 rows, and the last 5 rows:
import pandas as pd

df = pd.read_csv('data.csv')

print(df) 

#You can check your system's maximum rows with the pd.options.display.max_rows statement.
import pandas as pd

print(pd.options.display.max_rows) 

#You can change the maximum rows number with the same statement.
#Increase the maximum number of rows to display the entire DataFrame:

import pandas as pd

pd.options.display.max_rows = 9999

df = pd.read_csv('data.csv')

print(df) 


#Read JSON
#Big data sets are often stored, or extracted as JSON.
#JSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas.
#In our examples we will be using a JSON file called 'data.json'.
#Load the JSON file into a DataFrame:

#JSON objects have the same format as Python dictionaries.
# Load a Python Dictionary into a DataFrame:

import pandas as pd

data = {
  "Duration":{
    "0":60,
    "1":60,
    "2":60,
    "3":45,
    "4":45,
    "5":60
  },
  "Pulse":{
    "0":110,
    "1":117,
    "2":103,
    "3":109,
    "4":117,
    "5":102
  },
  "Maxpulse":{
    "0":130,
    "1":145,
    "2":135,
    "3":175,
    "4":148,
    "5":127
  },
  "Calories":{
    "0":409,
    "1":479,
    "2":340,
    "3":282,
    "4":406,
    "5":300
  }
}

df = pd.DataFrame(data)

print(df)  

#Pandas - Analyzing DataFrames
#Viewing the data
#The head() method is a quick overview of the DataFrame that returns the headers and a specified number of rows, starting from the top.

import pandas as pd

df = pd.read_csv('data.csv')

print(df.head(10)) 

#There is also a tail() method for viewing the last rows of the DataFrame.
# The tail() method returns the headers and a specified number of rows, starting from the bottom.

print(df.tail(3))  

#Info About the Data
#The DataFrames object has a method called info(), that gives you more information about the data set

print(df.info())  

#Pandas - Cleaning Data
#Data cleaning means fixing bad data in your data set
# Bad data could include Empty cells, Data in wrong format, Wrong data and Duplicates

#Notice in the result that some rows have been removed (row 17, 27, 91, 118 and 141).
#These rows had cells with empty values.

import pandas as pd

df = pd.read_csv('data.csv')

new_df = df.dropna()

print(new_df.to_string())

#Cleaning dirtydata.csv
import pandas as pd

df = pd.read_csv('dirtydata.csv')

print(df.to_string()) 

#Remove Raws
#One way to deal with empty cells is to remove rows that contain empty cells.


#Ddropna(inplace = True) will NOT return a new DataFrame, but it will remove all rows containg NULL values from the original DataFrame.
import pandas as pd

df = pd.read_csv('dirtydata.csv')

df.dropna(inplace = True)

print(df.to_string()) 


#The fillna() method allows us to replace empty cells with a value:
#Replace NULL values with the number 130:

import pandas as pd

df = pd.read_csv('dirtydata.csv')

df.fillna(130, inplace = True) 

#Replace Using Mean, Median, or Mode
#A common way to replace empty cells, is to calculate the mean, median or mode value of the column.
#Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column:
#Calculate the MEAN, and replace any empty values with it:
#Mean = the average value (the sum of all values divided by number of values).


import pandas as pd

df = pd.read_csv('dirtydata.csv')

x = df["Calories"].mean()

df["Calories"].fillna(x, inplace = True) 


#Calculate the MEDIAN, and replace any empty values with it:
#Median = the value in the middle, after you have sorted all values ascending.


import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].median()

df["Calories"].fillna(x, inplace = True) 



#Mode = the value that appears most frequently.

import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].mode()[0]

df["Calories"].fillna(x, inplace = True) 